// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ViewAlbum is an object representing the database table.
type ViewAlbum struct {
	ID              null.String `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	AlbumIdentifier null.String `boil:"album_identifier" json:"album_identifier,omitempty" toml:"album_identifier" yaml:"album_identifier,omitempty"`
	Album           null.String `boil:"album" json:"album,omitempty" toml:"album" yaml:"album,omitempty"`
	Duration        null.Int64  `boil:"duration" json:"duration,omitempty" toml:"duration" yaml:"duration,omitempty"`
	BitRate         null.Int    `boil:"bit_rate" json:"bit_rate,omitempty" toml:"bit_rate" yaml:"bit_rate,omitempty"`
	Performer       null.String `boil:"performer" json:"performer,omitempty" toml:"performer" yaml:"performer,omitempty"`
	Genre           null.String `boil:"genre" json:"genre,omitempty" toml:"genre" yaml:"genre,omitempty"`
	RecordedDate    null.Int    `boil:"recorded_date" json:"recorded_date,omitempty" toml:"recorded_date" yaml:"recorded_date,omitempty"`
	SamplingRate    null.Int    `boil:"sampling_rate" json:"sampling_rate,omitempty" toml:"sampling_rate" yaml:"sampling_rate,omitempty"`
	TrackNameTotal  null.Int    `boil:"track_name_total" json:"track_name_total,omitempty" toml:"track_name_total" yaml:"track_name_total,omitempty"`
	ShaImage        null.String `boil:"sha_image" json:"sha_image,omitempty" toml:"sha_image" yaml:"sha_image,omitempty"`
	Format          null.String `boil:"format" json:"format,omitempty" toml:"format" yaml:"format,omitempty"`
	FileSize        null.Int    `boil:"file_size" json:"file_size,omitempty" toml:"file_size" yaml:"file_size,omitempty"`

	R *viewAlbumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L viewAlbumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ViewAlbumColumns = struct {
	ID              string
	AlbumIdentifier string
	Album           string
	Duration        string
	BitRate         string
	Performer       string
	Genre           string
	RecordedDate    string
	SamplingRate    string
	TrackNameTotal  string
	ShaImage        string
	Format          string
	FileSize        string
}{
	ID:              "id",
	AlbumIdentifier: "album_identifier",
	Album:           "album",
	Duration:        "duration",
	BitRate:         "bit_rate",
	Performer:       "performer",
	Genre:           "genre",
	RecordedDate:    "recorded_date",
	SamplingRate:    "sampling_rate",
	TrackNameTotal:  "track_name_total",
	ShaImage:        "sha_image",
	Format:          "format",
	FileSize:        "file_size",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ViewAlbumWhere = struct {
	ID              whereHelpernull_String
	AlbumIdentifier whereHelpernull_String
	Album           whereHelpernull_String
	Duration        whereHelpernull_Int64
	BitRate         whereHelpernull_Int
	Performer       whereHelpernull_String
	Genre           whereHelpernull_String
	RecordedDate    whereHelpernull_Int
	SamplingRate    whereHelpernull_Int
	TrackNameTotal  whereHelpernull_Int
	ShaImage        whereHelpernull_String
	Format          whereHelpernull_String
	FileSize        whereHelpernull_Int
}{
	ID:              whereHelpernull_String{field: "\"view_albums\".\"id\""},
	AlbumIdentifier: whereHelpernull_String{field: "\"view_albums\".\"album_identifier\""},
	Album:           whereHelpernull_String{field: "\"view_albums\".\"album\""},
	Duration:        whereHelpernull_Int64{field: "\"view_albums\".\"duration\""},
	BitRate:         whereHelpernull_Int{field: "\"view_albums\".\"bit_rate\""},
	Performer:       whereHelpernull_String{field: "\"view_albums\".\"performer\""},
	Genre:           whereHelpernull_String{field: "\"view_albums\".\"genre\""},
	RecordedDate:    whereHelpernull_Int{field: "\"view_albums\".\"recorded_date\""},
	SamplingRate:    whereHelpernull_Int{field: "\"view_albums\".\"sampling_rate\""},
	TrackNameTotal:  whereHelpernull_Int{field: "\"view_albums\".\"track_name_total\""},
	ShaImage:        whereHelpernull_String{field: "\"view_albums\".\"sha_image\""},
	Format:          whereHelpernull_String{field: "\"view_albums\".\"format\""},
	FileSize:        whereHelpernull_Int{field: "\"view_albums\".\"file_size\""},
}

// ViewAlbumRels is where relationship names are stored.
var ViewAlbumRels = struct {
}{}

// viewAlbumR is where relationships are stored.
type viewAlbumR struct {
}

// NewStruct creates a new relationship struct
func (*viewAlbumR) NewStruct() *viewAlbumR {
	return &viewAlbumR{}
}

// viewAlbumL is where Load methods for each relationship are stored.
type viewAlbumL struct{}

var (
	viewAlbumAllColumns            = []string{"id", "album_identifier", "album", "duration", "bit_rate", "performer", "genre", "recorded_date", "sampling_rate", "track_name_total", "sha_image", "format", "file_size"}
	viewAlbumColumnsWithoutDefault = []string{"id", "album_identifier", "album", "duration", "bit_rate", "performer", "genre", "recorded_date", "sampling_rate", "track_name_total", "sha_image", "format", "file_size"}
	viewAlbumColumnsWithDefault    = []string{}
	viewAlbumPrimaryKeyColumns     = []string{"id"}
)

type (
	// ViewAlbumSlice is an alias for a slice of pointers to ViewAlbum.
	// This should generally be used opposed to []ViewAlbum.
	ViewAlbumSlice []*ViewAlbum

	viewAlbumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	viewAlbumType                 = reflect.TypeOf(&ViewAlbum{})
	viewAlbumMapping              = queries.MakeStructMapping(viewAlbumType)
	viewAlbumPrimaryKeyMapping, _ = queries.BindMapping(viewAlbumType, viewAlbumMapping, viewAlbumPrimaryKeyColumns)
	viewAlbumInsertCacheMut       sync.RWMutex
	viewAlbumInsertCache          = make(map[string]insertCache)
	viewAlbumUpdateCacheMut       sync.RWMutex
	viewAlbumUpdateCache          = make(map[string]updateCache)
	viewAlbumUpsertCacheMut       sync.RWMutex
	viewAlbumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single viewAlbum record from the query.
func (q viewAlbumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ViewAlbum, error) {
	o := &ViewAlbum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for view_albums")
	}

	return o, nil
}

// All returns all ViewAlbum records from the query.
func (q viewAlbumQuery) All(ctx context.Context, exec boil.ContextExecutor) (ViewAlbumSlice, error) {
	var o []*ViewAlbum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to ViewAlbum slice")
	}

	return o, nil
}

// Count returns the count of all ViewAlbum records in the query.
func (q viewAlbumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count view_albums rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q viewAlbumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if view_albums exists")
	}

	return count > 0, nil
}

// ViewAlbums retrieves all the records using an executor.
func ViewAlbums(mods ...qm.QueryMod) viewAlbumQuery {
	mods = append(mods, qm.From("\"view_albums\""))
	return viewAlbumQuery{NewQuery(mods...)}
}

// FindViewAlbum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindViewAlbum(ctx context.Context, exec boil.ContextExecutor, iD null.String, selectCols ...string) (*ViewAlbum, error) {
	viewAlbumObj := &ViewAlbum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"view_albums\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, viewAlbumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from view_albums")
	}

	return viewAlbumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ViewAlbum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no view_albums provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(viewAlbumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	viewAlbumInsertCacheMut.RLock()
	cache, cached := viewAlbumInsertCache[key]
	viewAlbumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			viewAlbumAllColumns,
			viewAlbumColumnsWithDefault,
			viewAlbumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(viewAlbumType, viewAlbumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(viewAlbumType, viewAlbumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"view_albums\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"view_albums\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into view_albums")
	}

	if !cached {
		viewAlbumInsertCacheMut.Lock()
		viewAlbumInsertCache[key] = cache
		viewAlbumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ViewAlbum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ViewAlbum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	viewAlbumUpdateCacheMut.RLock()
	cache, cached := viewAlbumUpdateCache[key]
	viewAlbumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			viewAlbumAllColumns,
			viewAlbumPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update view_albums, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"view_albums\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, viewAlbumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(viewAlbumType, viewAlbumMapping, append(wl, viewAlbumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update view_albums row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for view_albums")
	}

	if !cached {
		viewAlbumUpdateCacheMut.Lock()
		viewAlbumUpdateCache[key] = cache
		viewAlbumUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q viewAlbumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for view_albums")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for view_albums")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ViewAlbumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), viewAlbumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"view_albums\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, viewAlbumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in viewAlbum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all viewAlbum")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ViewAlbum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no view_albums provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(viewAlbumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	viewAlbumUpsertCacheMut.RLock()
	cache, cached := viewAlbumUpsertCache[key]
	viewAlbumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			viewAlbumAllColumns,
			viewAlbumColumnsWithDefault,
			viewAlbumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			viewAlbumAllColumns,
			viewAlbumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert view_albums, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(viewAlbumPrimaryKeyColumns))
			copy(conflict, viewAlbumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"view_albums\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(viewAlbumType, viewAlbumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(viewAlbumType, viewAlbumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert view_albums")
	}

	if !cached {
		viewAlbumUpsertCacheMut.Lock()
		viewAlbumUpsertCache[key] = cache
		viewAlbumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ViewAlbum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ViewAlbum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no ViewAlbum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), viewAlbumPrimaryKeyMapping)
	sql := "DELETE FROM \"view_albums\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from view_albums")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for view_albums")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q viewAlbumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no viewAlbumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from view_albums")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for view_albums")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ViewAlbumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), viewAlbumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"view_albums\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, viewAlbumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from viewAlbum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for view_albums")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ViewAlbum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindViewAlbum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ViewAlbumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ViewAlbumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), viewAlbumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"view_albums\".* FROM \"view_albums\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, viewAlbumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ViewAlbumSlice")
	}

	*o = slice

	return nil
}

// ViewAlbumExists checks if the ViewAlbum row exists.
func ViewAlbumExists(ctx context.Context, exec boil.ContextExecutor, iD null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"view_albums\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if view_albums exists")
	}

	return exists, nil
}
