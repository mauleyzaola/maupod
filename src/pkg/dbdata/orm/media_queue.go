// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MediaQueue is an object representing the database table.
type MediaQueue struct {
	ID       string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Position int    `boil:"position" json:"position" toml:"position" yaml:"position"`
	MediaID  string `boil:"media_id" json:"media_id" toml:"media_id" yaml:"media_id"`

	R *mediaQueueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mediaQueueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MediaQueueColumns = struct {
	ID       string
	Position string
	MediaID  string
}{
	ID:       "id",
	Position: "position",
	MediaID:  "media_id",
}

// Generated where

var MediaQueueWhere = struct {
	ID       whereHelperstring
	Position whereHelperint
	MediaID  whereHelperstring
}{
	ID:       whereHelperstring{field: "\"media_queue\".\"id\""},
	Position: whereHelperint{field: "\"media_queue\".\"position\""},
	MediaID:  whereHelperstring{field: "\"media_queue\".\"media_id\""},
}

// MediaQueueRels is where relationship names are stored.
var MediaQueueRels = struct {
}{}

// mediaQueueR is where relationships are stored.
type mediaQueueR struct {
}

// NewStruct creates a new relationship struct
func (*mediaQueueR) NewStruct() *mediaQueueR {
	return &mediaQueueR{}
}

// mediaQueueL is where Load methods for each relationship are stored.
type mediaQueueL struct{}

var (
	mediaQueueAllColumns            = []string{"id", "position", "media_id"}
	mediaQueueColumnsWithoutDefault = []string{"id", "position", "media_id"}
	mediaQueueColumnsWithDefault    = []string{}
	mediaQueuePrimaryKeyColumns     = []string{"id"}
)

type (
	// MediaQueueSlice is an alias for a slice of pointers to MediaQueue.
	// This should generally be used opposed to []MediaQueue.
	MediaQueueSlice []*MediaQueue

	mediaQueueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mediaQueueType                 = reflect.TypeOf(&MediaQueue{})
	mediaQueueMapping              = queries.MakeStructMapping(mediaQueueType)
	mediaQueuePrimaryKeyMapping, _ = queries.BindMapping(mediaQueueType, mediaQueueMapping, mediaQueuePrimaryKeyColumns)
	mediaQueueInsertCacheMut       sync.RWMutex
	mediaQueueInsertCache          = make(map[string]insertCache)
	mediaQueueUpdateCacheMut       sync.RWMutex
	mediaQueueUpdateCache          = make(map[string]updateCache)
	mediaQueueUpsertCacheMut       sync.RWMutex
	mediaQueueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single mediaQueue record from the query.
func (q mediaQueueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MediaQueue, error) {
	o := &MediaQueue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for media_queue")
	}

	return o, nil
}

// All returns all MediaQueue records from the query.
func (q mediaQueueQuery) All(ctx context.Context, exec boil.ContextExecutor) (MediaQueueSlice, error) {
	var o []*MediaQueue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to MediaQueue slice")
	}

	return o, nil
}

// Count returns the count of all MediaQueue records in the query.
func (q mediaQueueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count media_queue rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mediaQueueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if media_queue exists")
	}

	return count > 0, nil
}

// MediaQueues retrieves all the records using an executor.
func MediaQueues(mods ...qm.QueryMod) mediaQueueQuery {
	mods = append(mods, qm.From("\"media_queue\""))
	return mediaQueueQuery{NewQuery(mods...)}
}

// FindMediaQueue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMediaQueue(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MediaQueue, error) {
	mediaQueueObj := &MediaQueue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"media_queue\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mediaQueueObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from media_queue")
	}

	return mediaQueueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MediaQueue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no media_queue provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(mediaQueueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mediaQueueInsertCacheMut.RLock()
	cache, cached := mediaQueueInsertCache[key]
	mediaQueueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mediaQueueAllColumns,
			mediaQueueColumnsWithDefault,
			mediaQueueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mediaQueueType, mediaQueueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mediaQueueType, mediaQueueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"media_queue\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"media_queue\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into media_queue")
	}

	if !cached {
		mediaQueueInsertCacheMut.Lock()
		mediaQueueInsertCache[key] = cache
		mediaQueueInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MediaQueue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MediaQueue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	mediaQueueUpdateCacheMut.RLock()
	cache, cached := mediaQueueUpdateCache[key]
	mediaQueueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mediaQueueAllColumns,
			mediaQueuePrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update media_queue, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"media_queue\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mediaQueuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mediaQueueType, mediaQueueMapping, append(wl, mediaQueuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update media_queue row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for media_queue")
	}

	if !cached {
		mediaQueueUpdateCacheMut.Lock()
		mediaQueueUpdateCache[key] = cache
		mediaQueueUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q mediaQueueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for media_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for media_queue")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MediaQueueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"media_queue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mediaQueuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in mediaQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all mediaQueue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MediaQueue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no media_queue provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaQueueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mediaQueueUpsertCacheMut.RLock()
	cache, cached := mediaQueueUpsertCache[key]
	mediaQueueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mediaQueueAllColumns,
			mediaQueueColumnsWithDefault,
			mediaQueueColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mediaQueueAllColumns,
			mediaQueuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert media_queue, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mediaQueuePrimaryKeyColumns))
			copy(conflict, mediaQueuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"media_queue\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mediaQueueType, mediaQueueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mediaQueueType, mediaQueueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert media_queue")
	}

	if !cached {
		mediaQueueUpsertCacheMut.Lock()
		mediaQueueUpsertCache[key] = cache
		mediaQueueUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MediaQueue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MediaQueue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no MediaQueue provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mediaQueuePrimaryKeyMapping)
	sql := "DELETE FROM \"media_queue\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from media_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for media_queue")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mediaQueueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no mediaQueueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from media_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for media_queue")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MediaQueueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"media_queue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mediaQueuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from mediaQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for media_queue")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MediaQueue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMediaQueue(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MediaQueueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MediaQueueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"media_queue\".* FROM \"media_queue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mediaQueuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in MediaQueueSlice")
	}

	*o = slice

	return nil
}

// MediaQueueExists checks if the MediaQueue row exists.
func MediaQueueExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"media_queue\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if media_queue exists")
	}

	return exists, nil
}
