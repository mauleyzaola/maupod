// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MediaEvent is an object representing the database table.
type MediaEvent struct {
	ID      string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	MediaID string    `boil:"media_id" json:"media_id" toml:"media_id" yaml:"media_id"`
	TS      time.Time `boil:"ts" json:"ts" toml:"ts" yaml:"ts"`
	Event   int       `boil:"event" json:"event" toml:"event" yaml:"event"`

	R *mediaEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mediaEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MediaEventColumns = struct {
	ID      string
	MediaID string
	TS      string
	Event   string
}{
	ID:      "id",
	MediaID: "media_id",
	TS:      "ts",
	Event:   "event",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var MediaEventWhere = struct {
	ID      whereHelperstring
	MediaID whereHelperstring
	TS      whereHelpertime_Time
	Event   whereHelperint
}{
	ID:      whereHelperstring{field: "\"media_event\".\"id\""},
	MediaID: whereHelperstring{field: "\"media_event\".\"media_id\""},
	TS:      whereHelpertime_Time{field: "\"media_event\".\"ts\""},
	Event:   whereHelperint{field: "\"media_event\".\"event\""},
}

// MediaEventRels is where relationship names are stored.
var MediaEventRels = struct {
	Medium string
}{
	Medium: "Medium",
}

// mediaEventR is where relationships are stored.
type mediaEventR struct {
	Medium *Medium `boil:"Medium" json:"Medium" toml:"Medium" yaml:"Medium"`
}

// NewStruct creates a new relationship struct
func (*mediaEventR) NewStruct() *mediaEventR {
	return &mediaEventR{}
}

// mediaEventL is where Load methods for each relationship are stored.
type mediaEventL struct{}

var (
	mediaEventAllColumns            = []string{"id", "media_id", "ts", "event"}
	mediaEventColumnsWithoutDefault = []string{"id", "media_id", "ts", "event"}
	mediaEventColumnsWithDefault    = []string{}
	mediaEventPrimaryKeyColumns     = []string{"id"}
)

type (
	// MediaEventSlice is an alias for a slice of pointers to MediaEvent.
	// This should generally be used opposed to []MediaEvent.
	MediaEventSlice []*MediaEvent

	mediaEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mediaEventType                 = reflect.TypeOf(&MediaEvent{})
	mediaEventMapping              = queries.MakeStructMapping(mediaEventType)
	mediaEventPrimaryKeyMapping, _ = queries.BindMapping(mediaEventType, mediaEventMapping, mediaEventPrimaryKeyColumns)
	mediaEventInsertCacheMut       sync.RWMutex
	mediaEventInsertCache          = make(map[string]insertCache)
	mediaEventUpdateCacheMut       sync.RWMutex
	mediaEventUpdateCache          = make(map[string]updateCache)
	mediaEventUpsertCacheMut       sync.RWMutex
	mediaEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single mediaEvent record from the query.
func (q mediaEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MediaEvent, error) {
	o := &MediaEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for media_event")
	}

	return o, nil
}

// All returns all MediaEvent records from the query.
func (q mediaEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (MediaEventSlice, error) {
	var o []*MediaEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to MediaEvent slice")
	}

	return o, nil
}

// Count returns the count of all MediaEvent records in the query.
func (q mediaEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count media_event rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mediaEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if media_event exists")
	}

	return count > 0, nil
}

// Medium pointed to by the foreign key.
func (o *MediaEvent) Medium(mods ...qm.QueryMod) mediumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MediaID),
	}

	queryMods = append(queryMods, mods...)

	query := Media(queryMods...)
	queries.SetFrom(query.Query, "\"media\"")

	return query
}

// LoadMedium allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mediaEventL) LoadMedium(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMediaEvent interface{}, mods queries.Applicator) error {
	var slice []*MediaEvent
	var object *MediaEvent

	if singular {
		object = maybeMediaEvent.(*MediaEvent)
	} else {
		slice = *maybeMediaEvent.(*[]*MediaEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mediaEventR{}
		}
		args = append(args, object.MediaID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mediaEventR{}
			}

			for _, a := range args {
				if a == obj.MediaID {
					continue Outer
				}
			}

			args = append(args, obj.MediaID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`media`),
		qm.WhereIn(`media.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Medium")
	}

	var resultSlice []*Medium
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Medium")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for media")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for media")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Medium = foreign
		if foreign.R == nil {
			foreign.R = &mediumR{}
		}
		foreign.R.MediaEvents = append(foreign.R.MediaEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MediaID == foreign.ID {
				local.R.Medium = foreign
				if foreign.R == nil {
					foreign.R = &mediumR{}
				}
				foreign.R.MediaEvents = append(foreign.R.MediaEvents, local)
				break
			}
		}
	}

	return nil
}

// SetMedium of the mediaEvent to the related item.
// Sets o.R.Medium to related.
// Adds o to related.R.MediaEvents.
func (o *MediaEvent) SetMedium(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Medium) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"media_event\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"media_id"}),
		strmangle.WhereClause("\"", "\"", 2, mediaEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MediaID = related.ID
	if o.R == nil {
		o.R = &mediaEventR{
			Medium: related,
		}
	} else {
		o.R.Medium = related
	}

	if related.R == nil {
		related.R = &mediumR{
			MediaEvents: MediaEventSlice{o},
		}
	} else {
		related.R.MediaEvents = append(related.R.MediaEvents, o)
	}

	return nil
}

// MediaEvents retrieves all the records using an executor.
func MediaEvents(mods ...qm.QueryMod) mediaEventQuery {
	mods = append(mods, qm.From("\"media_event\""))
	return mediaEventQuery{NewQuery(mods...)}
}

// FindMediaEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMediaEvent(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MediaEvent, error) {
	mediaEventObj := &MediaEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"media_event\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mediaEventObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from media_event")
	}

	return mediaEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MediaEvent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no media_event provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(mediaEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mediaEventInsertCacheMut.RLock()
	cache, cached := mediaEventInsertCache[key]
	mediaEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mediaEventAllColumns,
			mediaEventColumnsWithDefault,
			mediaEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mediaEventType, mediaEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mediaEventType, mediaEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"media_event\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"media_event\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into media_event")
	}

	if !cached {
		mediaEventInsertCacheMut.Lock()
		mediaEventInsertCache[key] = cache
		mediaEventInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MediaEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MediaEvent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	mediaEventUpdateCacheMut.RLock()
	cache, cached := mediaEventUpdateCache[key]
	mediaEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mediaEventAllColumns,
			mediaEventPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update media_event, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"media_event\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mediaEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mediaEventType, mediaEventMapping, append(wl, mediaEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update media_event row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for media_event")
	}

	if !cached {
		mediaEventUpdateCacheMut.Lock()
		mediaEventUpdateCache[key] = cache
		mediaEventUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q mediaEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for media_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for media_event")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MediaEventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"media_event\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mediaEventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in mediaEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all mediaEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MediaEvent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no media_event provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mediaEventUpsertCacheMut.RLock()
	cache, cached := mediaEventUpsertCache[key]
	mediaEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mediaEventAllColumns,
			mediaEventColumnsWithDefault,
			mediaEventColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mediaEventAllColumns,
			mediaEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert media_event, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mediaEventPrimaryKeyColumns))
			copy(conflict, mediaEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"media_event\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mediaEventType, mediaEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mediaEventType, mediaEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert media_event")
	}

	if !cached {
		mediaEventUpsertCacheMut.Lock()
		mediaEventUpsertCache[key] = cache
		mediaEventUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MediaEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MediaEvent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no MediaEvent provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mediaEventPrimaryKeyMapping)
	sql := "DELETE FROM \"media_event\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from media_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for media_event")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mediaEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no mediaEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from media_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for media_event")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MediaEventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"media_event\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mediaEventPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from mediaEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for media_event")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MediaEvent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMediaEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MediaEventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MediaEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"media_event\".* FROM \"media_event\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mediaEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in MediaEventSlice")
	}

	*o = slice

	return nil
}

// MediaEventExists checks if the MediaEvent row exists.
func MediaEventExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"media_event\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if media_event exists")
	}

	return exists, nil
}
